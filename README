                         ===========================
                         repay: efficient repayments
                         ===========================

    Repay is a simple tool which computes the most efficient way for everyone
    to repay their debts.  You feed it a list of historical transactions:

        { "from":"Jane", "to":"Fred", "amt":7200 }
        { "from":"Rémy", "to":"Alex", "amt":7300 }
        { "from":"Fred", "to":"Mike", "amt":7800 }
        { "from":"Fred", "to":"Mike", "amt":4500 }
        { "from":"Mike", "to":"Alex", "amt":5600 }
        { "from":"Jane", "to":"Fred", "amt":9300 }
        { "from":"Mike", "to":"Rémy", "amt":6100 }
        { "from":"Alex", "to":"Jane", "amt":2400 }
        { "from":"Mike", "to":"Jane", "amt":6400 }
        { "from":"Jane", "to":"Rémy", "amt":9300 }

    And it spits out a minimal list of transactions which will make everyone
    square:

        { "from":"Fred", "to":"Mike", "amt":4200 }
        { "from":"Rémy", "to":"Jane", "amt":8100 }
        { "from":"Alex", "to":"Mike", "amt":1600 }
        { "from":"Alex", "to":"Jane", "amt":8900 }

USAGE

    repay [-x] <PATH>

        -x        Guarantees a minimal solution (see "Exact Mode", below)
        <PATH>    The ledger containing historical transactions

INPUT FORMAT

    As you can see, transactions are newline-delimited JSON objects.  The input
    transactions may contain additional fields which repay will ignore:

        { "date":"2018-02-17", "from":"Jane", "to":"Fred", "amt":7200, "reason":"Paid for lunch" }
        { "date":"2018-02-19", "from":"Rémy", "to":"Alex", "amt":7300, "reason":"Bet on the football" }
        { "date":"2018-02-19", "from":"Fred", "to":"Mike", "amt":7800, "reason":"Undisclosed" }
        { "date":"2018-02-20", "from":"Jane", "to":"Fred", "amt":9300, "reason":"Paid delivery man" }

    The output will still only contain "from", "to", and "amt", however.

    Note that all amounts must be integers - "amt: 2.50" will cause an error -
    so you'll probably want to record all amounts in a small currency like
    cents or pence or yen.

PERFORMANCE CONSIDERATIONS

    The time taken to parse the ledger is linear in its length.  On my machine,
    a million entries takes ~30s to parse.  If this becomes a problem, you
    might consider compacting your ledger.  (You can do this by running repay,
    negating all the amounts, and using this as the start of your new ledger.)

    In exact mode, solving time scales exponentially with the number of people
    involved.  Things can get bad very quickly: on my machine, a simple ledger
    mentioning 100 people takes more than 20 minutes to solve.  If you have
    lots of people with interconnected debts, you're stuck using approximate
    mode.

    In approximate mode, solving time scales with the total amount of debt (ie.
    the abs-sum of everyone's balances).  This shouldn't be a problem in
    practice.

LICENCE

    Licensed under either of the following, at your option:

     * Apache Licence 2.0 (see LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0)
     * MIT licence (see LICENSE-MIT or http://opensource.org/licenses/MIT)

    Unless you explicitly state otherwise, any contribution intentionally
    submitted for inclusion in the work by you, as defined in the Apache-2.0
    license, shall be dual licensed as above, without any additional terms or
    conditions.
